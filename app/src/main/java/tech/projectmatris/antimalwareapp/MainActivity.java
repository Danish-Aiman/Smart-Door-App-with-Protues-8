package tech.projectmatris.antimalwareapp;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;

import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.view.MenuItem;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.widget.Toolbar;

import com.google.android.material.navigation.NavigationView;
import com.projectmatris.antimalwareapp.R;

import static tech.projectmatris.antimalwareapp.helper.ThemeToggleHelper.toggleDarkMode;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,SharedPreferences.OnSharedPreferenceChangeListener {

    Button scanButton;
    TextView lastScanText;
    private Context context = this;
    private boolean withSysApps = false;
    SharedPreferences sharedPreferences;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        setupSharedPreferences();

        toggleDarkMode(sharedPreferences.getBoolean("darkMode",true));

        Toolbar toolbar = findViewById(R.id.toolbar);
        lastScanText = findViewById(R.id.textView1);

        setSupportActionBar(toolbar);


        withSysApps = sharedPreferences.getBoolean("includeSystemApps",false);

        Log.d("System apps","value from shared preference: "+withSysApps);

        String lastScan = sharedPreferences.getString("lastScan", "Never");

        lastScanText.setText(String.format("Last Scan: %s", lastScan));

        DrawerLayout drawer = findViewById(R.id.drawer_layout);

        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        scanButton = findViewById(R.id.scanButton);
        scanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("System apps","value while scan click: "+withSysApps);
                context.startActivity(new Intent(context,ScanActivity.class ).putExtra("withSysApps",withSysApps));
            }
        });
    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    private void setupSharedPreferences(){
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key){
        if(key.equals("includeSystemApps") && sharedPreferences.getBoolean(key,false)){
            withSysApps = sharedPreferences.getBoolean(key,false);
            Log.d("System apps","value changed: "+withSysApps);
            Toast.makeText(getApplicationContext(),"System apps will be included while scanning",Toast.LENGTH_LONG)
                    .show();
        } else if(key.equals("darkMode") && sharedPreferences.getBoolean(key,true)){
            toggleDarkMode(sharedPreferences.getBoolean("darkMode",true));
            Toast.makeText(getApplicationContext(),"Dark Mode is Enabled",Toast.LENGTH_LONG)
                    .show();
        } else if(key.equals("darkMode") && !sharedPreferences.getBoolean(key,true)){
            toggleDarkMode(sharedPreferences.getBoolean("darkMode",true));
            Toast.makeText(getApplicationContext(),"Dark Mode is Disabled",Toast.LENGTH_LONG)
                    .show();
        }

    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_scan) {
            // Handle the action
        } else if (id == R.id.nav_settings) {
            this.startActivity(new Intent(this,SettingsActivity.class));
        } else if (id == R.id.nav_help) {
            this.startActivity(new Intent(this,HelpActivity.class));
        } else if (id == R.id.nav_about) {
            this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse("https://www.projectmatris.tech")));
        } else if (id == R.id.nav_bug_report) {
            this.startActivity(new Intent("android.intent.action.VIEW", Uri.parse("https://www.projectmatris.tech")));
        } else if (id == R.id.nav_share) {
            Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);
            shareIntent.setType("text/plain");
            String shareContent = "Check out this app, Anti-malware for Android using Machine Learning: https://www.projectmatris.tech";
            shareIntent.putExtra(Intent.EXTRA_SUBJECT,"Project Matris");
            shareIntent.putExtra(Intent.EXTRA_TEXT,shareContent);
            startActivity(Intent.createChooser(shareIntent,"Share via"));
        }

        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);
    }
}
