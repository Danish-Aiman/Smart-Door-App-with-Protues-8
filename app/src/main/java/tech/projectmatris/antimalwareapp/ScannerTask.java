package tech.projectmatris.antimalwareapp;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.ProgressBar;
import android.widget.TextView;

import tech.projectmatris.antimalwareapp.data.AppInfo;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.tensorflow.lite.Interpreter;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ScannerTask extends AsyncTask<Void, String, Void> {
    private WeakReference<Context> contextRef;
    private WeakReference<Activity> activityRef;
    private Interpreter tflite = null;
    private JSONArray p_jArray = null;
    private JSONArray i_jArray = null;
    private ArrayList<AppInfo> scannedApps = new ArrayList<>();

    private WeakReference<ProgressBar> pb;
    private WeakReference<TextView> st1;
    private WeakReference<TextView> st2;
    private int installedAppsCount;
    private int status = 0;

    private boolean withSysApps;

    private static final String TAG = "ScannerTask";

    ScannerTask(Context context, Activity activity){
        contextRef = new WeakReference<>(context);
        this.activityRef = new WeakReference<>(activity);
    }

    void setProgressBar(ProgressBar progressBar){
        this.pb = new WeakReference<>(progressBar);
    }

    void setStatusText(TextView statusText){this.st1 = new WeakReference<>(statusText);}
    void setSecondaryStatusText(TextView secondaryStatusText){this.st2 = new WeakReference<>(secondaryStatusText);}
    void setWithSysApps(boolean prefValue){
        this.withSysApps = prefValue;
        Log.d("System apps","value: "+withSysApps);}

    @Override
    protected Void doInBackground(Void...param) {
        float[] inputVal = new float[1980];

        try {
            tflite = new Interpreter(loadModelFile());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            // Loading the features.json from assets folder. Refer loadJSONFromAsset() function for more details
            JSONObject obj = new JSONObject(loadJSONFromAsset());
            p_jArray = obj.getJSONArray("permissions");// This array stores permissions from features.json file
            i_jArray = obj.getJSONArray("intents");// This array  stores intents from features.json file
        } catch (JSONException e) {
            e.printStackTrace();
        }
        final PackageManager pm = contextRef.get().getPackageManager();
        List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
        //int count = 0;
        for (ApplicationInfo packageInfo : packages) {
            //status += 1;
            String scanningAppName = packageInfo.loadLabel(pm).toString();
            publishProgress(scanningAppName);

            AppInfo app = new AppInfo(packageInfo.loadLabel(pm).toString(),packageInfo.packageName,packageInfo.publicSourceDir);
            //app.appIcon = packageInfo.loadIcon(contextRef.get().getPackageManager());
            app.appIcon = packageInfo.loadIcon(pm);

            if ((packageInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 1 && !withSysApps) {// checking if it is a system app. We don't scan system apps.
                //Log.d("System apps","Inside if value: "+withSysApps);
                continue;
            } else {
                Log.d(TAG, "Installed package :" + packageInfo.packageName);
                //Log.d(TAG, "Source dir : " + packageInfo.sourceDir);
                //Log.d(TAG, "Launch Activity :" + pm.getLaunchIntentForPackage(packageInfo.packageName));

                try {
                    // Get the list of permissions used by the application. Refer getListOfPermissions() function for more details
                    ArrayList<String> appPermissionsList = getListOfPermissions(contextRef.get().createPackageContext(packageInfo.packageName, 0));
                    String str;

                    // Get the list of intents used by the application. Refer getListOfIntents() function for more details
                    ArrayList<String> appIntentsList = getListOfIntents(contextRef.get().createPackageContext(packageInfo.packageName, 0));

                    if(appIntentsList.size() == 0){
                        Log.d(TAG,"No intents found. Skipping...");
                        app.prediction = "Unknown";
                        scannedApps.add(app);
                        continue;
                    }

                    // The following for loops are used to create the input feature vector
                    for (int i = 0; i < p_jArray.length(); i++) {
                        str = p_jArray.optString(i);
                        if ((appPermissionsList.contains(str))) {
                            inputVal[i] = 1;
                            Log.d(TAG, "Check Permissions: "+str + " is present in appsPermissionsList.");
                        } else {
                            inputVal[i] = 0;
                            //Log.d("Check Permissions:", str + " is NOT present in appsPermissionsList.");
                        }
                    }
                    for (int i = 0; i < i_jArray.length(); i++) {
                        str = i_jArray.optString(i);
                        if ((appIntentsList.contains(str))) {
                            inputVal[i + 558] = 1;
                            Log.d(TAG, "Check Intents:"+str + " is present in appsIntentsList.");
                        } else {
                            inputVal[i + 558] = 0;
                            //Log.d("Check Intents:", str + " is NOT present in appsIntentsList.");
                        }
                    }
                    //Log.d("Info:", "feature vector is created.");

                    // To store output from the model
                    float[][] outputVal = new float[1][1];

                    // Run the model
                    tflite.run(inputVal, outputVal);
                    float inferredValue = outputVal[0][0];

                    Log.d(TAG, "prediction score:"+ inferredValue);

                    if (inferredValue > 0.75) {
                        Log.d(TAG,"prediction: Malware!!!");
                        app.prediction = "Malware";
                        //result.put(packageInfo.packageName,1);
                    } else if(inferredValue > 0.5){
                        Log.d(TAG,"prediction: Risky");
                        app.prediction = "Risky";
                    }else{
                        Log.d(TAG,"prediction: Goodware:)");
                        app.prediction = "Goodware";
                        //result.put(packageInfo.packageName,0);
                    }


                } catch (final PackageManager.NameNotFoundException exception) {
                    exception.printStackTrace();
                }
                //count += 1;
                //if (count == 5) {
                //    break;
                //}
            }
            scannedApps.add(app);
            if(isCancelled()){
                break;
            }
        }
        return null;
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }
/*
    @Override
    protected void onProgressUpdate(Integer[] values) {
        pb.setProgress(values[0]);
    }
*/

    @Override
    protected void onProgressUpdate(String... values) {
        st1.get().setText(values[0]);
        status+=1;
        pb.get().setProgress(status);
        st2.get().setText(String.format("%s of %s", Integer.toString(status), Integer.toString(installedAppsCount)));
    }

    @Override
    protected void onPostExecute(Void aVoid) {
        Collections.sort(scannedApps,AppInfo.appNameComparator);
        Log.d("Scanner Task","App Name:"+scannedApps.get(0).appName);
        Intent resultScreen = new Intent(contextRef.get(),ResultActivity.class);
        resultScreen.putParcelableArrayListExtra("appslist",scannedApps);
        this.activityRef.get().finish();
        contextRef.get().startActivity(resultScreen);
    }

    @Override
    protected void onPreExecute() {
        Log.d(TAG,"Started scanning.");
        installedAppsCount = contextRef.get().getPackageManager().getInstalledApplications(0).size();
        pb.get().setMax(installedAppsCount);
    }

    /**
     *Load the JSON file from assets folder
     *
     * @return String containing contents of JSON file
     *
     * Borrowed from: https://stackoverflow.com/questions/19945411 (GrIsHu)
     */
    private String loadJSONFromAsset(){
        String json;
        try {
            InputStream is = contextRef.get().getAssets().open("features.json");
            int size = is.available();
            byte[] buffer = new byte[size];
            //noinspection ResultOfMethodCallIgnored
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");

        }
        catch (IOException ex)
        {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    private MappedByteBuffer loadModelFile() throws IOException {
        AssetFileDescriptor fileDescriptor = contextRef.get().getAssets().openFd("saved_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }
    /**
     * Get the list of permissions used by the application
     *
     * Borrowed from: https://stackoverflow.com/questions/18236801 (Yousha Aleayoub)
     */
    private static ArrayList<String> getListOfPermissions(final Context context)
    {
        //String permissions = "";
        ArrayList<String> arr = new ArrayList<>();

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "uses-permission".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            //permissions += xmlParser.getAttributeValue(i)+"\n";
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,permissions);
        //return permissions;
        return arr;

    }

    private static ArrayList<String> getListOfIntents(final Context context)
    {
        //String intents = "";
        ArrayList<String> arr = new ArrayList<>();

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "action".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            //intents += xmlParser.getAttributeValue(i)+"\n";
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,intents);
        //return intents;
        return arr;
    }


}
