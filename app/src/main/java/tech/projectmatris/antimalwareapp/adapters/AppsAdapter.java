/*
 * LibreAV - Anti-malware for Android using machine learning
 * Copyright (C) 2020 Project Matris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package tech.projectmatris.antimalwareapp.adapters;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import tech.projectmatris.antimalwareapp.R;

import tech.projectmatris.antimalwareapp.data.AppInfo;

import java.lang.ref.WeakReference;
import java.util.ArrayList;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

public class AppsAdapter extends RecyclerView.Adapter {
    private ArrayList<AppInfo> apps;
    private WeakReference<Context> contextRef;


    public AppsAdapter(Context context, ArrayList<AppInfo> scannedapps) {
        apps = scannedapps;
        contextRef = new WeakReference<>(context);
    }

    class ViewHolder extends RecyclerView.ViewHolder {
        ImageView appIcon;
        TextView appLabel;
        TextView prediction;
        TextView systemApp;
        ImageView uninstallButton;

        ViewHolder(View itemView) {
            super(itemView);
            appIcon = itemView.findViewById(R.id.itemIcon);
            appLabel = itemView.findViewById(R.id.itemLabel);
            prediction = itemView.findViewById(R.id.itemSecondaryLabel);
            uninstallButton = itemView.findViewById(R.id.uninstallButton);
            systemApp = itemView.findViewById(R.id.systemApp);
        }

        void bindAppInfo(final AppInfo appInfo) {
            if (appInfo.appIcon == null) {
                appInfo.appIcon = appInfo.loadIcon(contextRef.get());
            }
            appIcon.setImageDrawable(appInfo.appIcon);
            appLabel.setText(appInfo.appName);
            systemApp.setText(appInfo.isSystemApp==1?"System App":"");
            if (appInfo.prediction.equalsIgnoreCase("Malware")) {
                prediction.setTextColor(Color.parseColor("#FF0000"));
            } else if (appInfo.prediction.equalsIgnoreCase("Goodware")) {
                prediction.setTextColor(Color.parseColor("#008000"));
            } else if (appInfo.prediction.equalsIgnoreCase("Risky")) {
                prediction.setTextColor(Color.parseColor("#FFA500"));
            } else {
                prediction.setTextColor(Color.parseColor("#0080FF"));
            }

            prediction.setText(appInfo.prediction);
            uninstallButton.setOnClickListener(new View.OnClickListener() {
                                                   @Override
                                                   public void onClick(View v) {
                                                       Intent intent = new Intent(Intent.ACTION_DELETE);
                                                       intent.setData(Uri.parse("package:" + appInfo.packageName));
                                                       contextRef.get().startActivity(intent);
                                                       delete(getAdapterPosition());
                                                   }
                                               }
            );

        }
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_result_list_item, parent, false);
        return new ViewHolder(itemView);
    }

    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
        AppsAdapter.ViewHolder vh = (AppsAdapter.ViewHolder) holder;
        vh.bindAppInfo(apps.get(position));
    }

    @Override
    public int getItemCount() {
        return apps.size();
    }

    private void delete(int position) {
        try {
            apps.remove(position);
            notifyItemRemoved(position);
        } catch (ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
        }
    }
}
