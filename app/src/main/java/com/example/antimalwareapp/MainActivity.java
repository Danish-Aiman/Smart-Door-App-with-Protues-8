package com.example.antimalwareapp;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.util.Log;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.List;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {

    private static final String TAG = "MainActivity";

    Button appsButton;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        appsButton = (Button) findViewById(R.id.list_apps_button);
        appsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final PackageManager pm = getPackageManager();
                //get a list of installed apps.
                List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
                int count = 0;
                for (ApplicationInfo packageInfo : packages) {
                    Log.d(TAG, "Installed package :" + packageInfo.packageName);
                    //Log.d(TAG, "Source dir : " + packageInfo.sourceDir);
                    //Log.d(TAG, "Launch Activity :" + pm.getLaunchIntentForPackage(packageInfo.packageName));
                    try{
                        String p = getListOfPermissions(createPackageContext(packageInfo.packageName,0));
                        Log.d("Permissions:",p);
                        String i = getListOfIntents(createPackageContext(packageInfo.packageName,0));
                        Log.d("Intents:",i);
                    }
                    catch (final PackageManager.NameNotFoundException exception)
                    {
                        exception.printStackTrace();
                    }
                    count+=1;
                    if(count == 100){
                        break;
                    }
                }
                //String p = getListOfPermissions(createPackageContext());
                //Log.i(TAG,p);
            }
        });
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {

        } else if (id == R.id.nav_manage) {

        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    //for example, permission can be "android.permission.WRITE_EXTERNAL_STORAGE"
    /*public boolean hasPermission(String permission)
    {
        try {
            PackageInfo info = getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS);
            if (info.requestedPermissions != null) {
                for (String p : info.requestedPermissions) {
                    if (p.equals(permission)) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }*/
    public static String getListOfPermissions(final Context context)
    {
        String permissions = "";

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "uses-permission".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            permissions += xmlParser.getAttributeValue(i)+"\n";
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,permissions);
        return permissions;
    }
    public static String getListOfIntents(final Context context)
    {
        String intents = "";

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "action".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            intents += xmlParser.getAttributeValue(i)+"\n";
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,permissions);
        return intents;
    }

}
