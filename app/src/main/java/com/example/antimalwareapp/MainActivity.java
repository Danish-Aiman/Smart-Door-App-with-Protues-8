package com.example.antimalwareapp;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.XmlResourceParser;
import android.os.Bundle;
import android.util.Log;
import android.view.View;

import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import androidx.appcompat.widget.Toolbar;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.snackbar.Snackbar;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;
import org.tensorflow.lite.Interpreter;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {

    private static final String TAG = "MainActivity";
    private JSONArray p_jArray;
    private JSONArray i_jArray;
    float[] inputVal;
    Interpreter tflite;


    Button scanButton;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        // Construct the interpreter for TFLite model
        try {
            tflite = new Interpreter(loadModelFile());
        } catch (Exception ex){
            ex.printStackTrace();
        }

        // Initializing the input array (Feature vector) to be given to the model
        inputVal = new float[10796];

        try{
            // Loading the features.json from assests folder. Refer loadJSONFromAsset() function for more details
            JSONObject obj = new JSONObject(loadJSONFromAsset());
            p_jArray = obj.getJSONArray("permissions");// This array stores permissions from features.json file
            i_jArray = obj.getJSONArray("intents");// This array  stores intents from features.json file
        }
        catch (JSONException e)
        {
            e.printStackTrace();
        }


        scanButton = (Button) findViewById(R.id.scanButton);
        scanButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final PackageManager pm = getPackageManager();
                // Get a list of installed apps and store info in packages
                List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);

                int count = 0;// This count is used to keep track of the no of applications
                for (ApplicationInfo packageInfo : packages) {
                    if ((packageInfo.flags & packageInfo.FLAG_SYSTEM) == 1) {// checking if it is a system app. We don't scan system apps.
                        continue;
                    } else {
                        Log.d(TAG, "Installed package :" + packageInfo.packageName);
                        //Log.d(TAG, "Source dir : " + packageInfo.sourceDir);
                        //Log.d(TAG, "Launch Activity :" + pm.getLaunchIntentForPackage(packageInfo.packageName));

                        try {
                            // Get the list of permissions used by the application. Refer getListOfPermissions() function for more details
                            ArrayList<String> appPermissionsList = getListOfPermissions(createPackageContext(packageInfo.packageName, 0));
                            String str;

                            // Get the list of intents used by the application. Refer getListOfIntents() function for more details
                            ArrayList<String> appIntentsList = getListOfIntents(createPackageContext(packageInfo.packageName,0));

                            // The following for loops are used to create the input feature vector
                            for (int i=0; i< p_jArray.length(); i++){
                                str = p_jArray.optString(i);
                                if((appPermissionsList.contains(str)) == true)
                                {
                                    inputVal[i]=1;
                                    Log.d("Check Permissions:", str+" is present in appsPermissionsList.");
                                } else {
                                    inputVal[i]=0;
                                }
                            }
                            for (int i=0; i< i_jArray.length(); i++){
                                str = i_jArray.optString(i);
                                if((appIntentsList.contains(str)) == true)
                                {
                                    inputVal[i+1716]=1;
                                    Log.d("Check Intents:", str+" is present in appsIntentsList.");
                                } else {
                                    inputVal[i+1716]=0;
                                }
                            }
                            Log.d("Info:","feature vector is created.");

                            // To store output from the model
                            float[][] outputVal = new float[1][1];

                            // Run the model
                            tflite.run(inputVal, outputVal);
                            float inferredValue = outputVal[0][0];

                            if(inferredValue>0.5){
                                Log.d("prediction:","Malware!!!");
                            } else {
                                Log.d("prediction:","Goodware:)");
                            }
                        } catch (final PackageManager.NameNotFoundException exception) {
                            exception.printStackTrace();
                        }
                        count += 1;
                        if (count == 5) {
                            break;
                        }
                    }
                }
            }
        });
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {

        } else if (id == R.id.nav_manage) {

        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    /**
     * Get the list of permissions used by the application
     *
     * @param context
     * @return ArrayList that contains permissions used by the application
     *
     * Borrowed from: https://stackoverflow.com/questions/18236801 (Yousha Aleayoub)
     */
    public static ArrayList<String> getListOfPermissions(final Context context)
    {
        //String permissions = "";
        ArrayList<String> arr = new ArrayList<String>();

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "uses-permission".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            //permissions += xmlParser.getAttributeValue(i)+"\n";
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,permissions);
        //return permissions;
        return arr;

    }

    public static ArrayList<String> getListOfIntents(final Context context)
    {
        //String intents = "";
        ArrayList<String> arr = new ArrayList<String>();

        try{
            final AssetManager am = context.createPackageContext(context.getPackageName(),0).getAssets();
            final XmlResourceParser xmlParser = am.openXmlResourceParser(0,"AndroidManifest.xml");
            int eventType = xmlParser.getEventType();
            while(eventType!= XmlPullParser.END_DOCUMENT)
            {
                if((eventType==XmlPullParser.START_TAG) && "action".equals(xmlParser.getName()))
                {
                    for(byte i = 0;i<xmlParser.getAttributeCount();i++)
                    {
                        if(xmlParser.getAttributeName(i).equals("name"))
                        {
                            //intents += xmlParser.getAttributeValue(i)+"\n";
                            arr.add(xmlParser.getAttributeValue(i));
                        }
                    }
                }
                eventType = xmlParser.nextToken();
            }
            xmlParser.close();
        }
        catch (final XmlPullParserException exception)
        {
            exception.printStackTrace();
        }
        catch (final PackageManager.NameNotFoundException exception)
        {
            exception.printStackTrace();
        }
        catch (final IOException exception)
        {
            exception.printStackTrace();
        }
        //Log.i(TAG,intents);
        //return intents;
        return arr;
    }

    /**
     *Load the JSON file from assets folder
     *
     * @return String containing contents of JSON file
     *
     * Borrowed from: https://stackoverflow.com/questions/19945411 (GrIsHu)
     */
    public String loadJSONFromAsset(){
        String json = null;
        try {
            InputStream is = this.getAssets().open("features.json");
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    private MappedByteBuffer loadModelFile() throws IOException{
        AssetFileDescriptor fileDescriptor = this.getAssets().openFd("saved_model.tflite");
        FileInputStream inputStream = new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel = inputStream.getChannel();
        long startOffset = fileDescriptor.getStartOffset();
        long declaredLength = fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength);
    }

}
